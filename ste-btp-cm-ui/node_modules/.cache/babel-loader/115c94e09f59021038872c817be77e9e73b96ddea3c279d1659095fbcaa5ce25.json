{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Container,Box}from\"@material-ui/core\";import{DataGrid}from\"@material-ui/data-grid\";import{getTableData,getTableCount}from\"api\";import{jsx as _jsx}from\"react/jsx-runtime\";const columns=[{field:\"employeeID\",headerName:\"employeeID\",width:250},{field:\"empEmail\",headerName:\"empEmail\",flex:1},{field:\"empJobCode\",headerName:\"empJobCode\",flex:1}];const PAGE_SIZE=15;export default function MasterPage(){const[items,setItems]=useState([]);const[loading,setLoading]=useState(false);// Number of rows which exist on the service\nconst[rowCount,setRowCount]=useState(0);const loadData=async function(isFirstLoad){let skip=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{setItems([]);setLoading(true);if(isFirstLoad){const count=await getTableCount();setRowCount(count);}const _items=await getTableData({$top:PAGE_SIZE,$skip:skip});const itemsWithIds=_items.map((item,index)=>{item.id=index;return item;});setItems(itemsWithIds);}finally{setLoading(false);}};const handlePageChanged=_ref=>{let{page}=_ref;loadData(false,page*PAGE_SIZE);};useEffect(()=>{// when component mounted\nloadData(true);},[]);return/*#__PURE__*/_jsx(Container,{disableGutters:true,children:/*#__PURE__*/_jsx(Box,{height:\"80vh\",py:5,children:/*#__PURE__*/_jsx(DataGrid,{loading:loading,rows:items,columns:columns,pageSize:PAGE_SIZE,paginationMode:\"server\",rowCount:rowCount,onPageChange:handlePageChanged})})});}","map":{"version":3,"names":["React","useEffect","useState","Container","Box","DataGrid","getTableData","getTableCount","jsx","_jsx","columns","field","headerName","width","flex","PAGE_SIZE","MasterPage","items","setItems","loading","setLoading","rowCount","setRowCount","loadData","isFirstLoad","skip","arguments","length","undefined","count","_items","$top","$skip","itemsWithIds","map","item","index","id","handlePageChanged","_ref","page","disableGutters","children","height","py","rows","pageSize","paginationMode","onPageChange"],"sources":["/home/user/projects/ste-btp-cm/ste-btp-cm-ui/src/pages/MasterPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Box } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getTableData, getTableCount } from \"api\";\n\nconst columns = [\n  { field: \"employeeID\", headerName: \"employeeID\", width: 250 },\n  { field: \"empEmail\", headerName: \"empEmail\", flex: 1 },\n  { field: \"empJobCode\", headerName: \"empJobCode\", flex: 1 }\n];\n\nconst PAGE_SIZE = 15;\n\nexport default function MasterPage() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Number of rows which exist on the service\n  const [rowCount, setRowCount] = useState(0);\n\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setItems([]);\n      setLoading(true);\n\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n\n      const _items = await getTableData({\n        $top: PAGE_SIZE,\n        $skip: skip\n      });\n      const itemsWithIds = _items.map((item, index) => {\n        item.id = index;\n        return item;\n      });\n      setItems(itemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChanged = ({ page }) => {\n    loadData(false, page * PAGE_SIZE);\n  };\n\n  useEffect(() => {\n    // when component mounted\n    loadData(true);\n  }, []);\n\n  return (\n    <Container disableGutters>\n      <Box height=\"80vh\" py={5}>\n        <DataGrid\n          loading={loading}\n          rows={items}\n          columns={columns}\n          pageSize={PAGE_SIZE}\n          paginationMode=\"server\"\n          rowCount={rowCount}\n          onPageChange={handlePageChanged}\n        />\n      </Box>\n    </Container>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,SAAS,CAAEC,GAAG,KAAQ,mBAAmB,CAClD,OAASC,QAAQ,KAAQ,wBAAwB,CACjD,OAASC,YAAY,CAAEC,aAAa,KAAQ,KAAK,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAElD,KAAM,CAAAC,OAAO,CAAG,CACd,CAAEC,KAAK,CAAE,YAAY,CAAEC,UAAU,CAAE,YAAY,CAAEC,KAAK,CAAE,GAAI,CAAC,CAC7D,CAAEF,KAAK,CAAE,UAAU,CAAEC,UAAU,CAAE,UAAU,CAAEE,IAAI,CAAE,CAAE,CAAC,CACtD,CAAEH,KAAK,CAAE,YAAY,CAAEC,UAAU,CAAE,YAAY,CAAEE,IAAI,CAAE,CAAE,CAAC,CAC3D,CAED,KAAM,CAAAC,SAAS,CAAG,EAAE,CAEpB,cAAe,SAAS,CAAAC,UAAUA,CAAA,CAAG,CACnC,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CAE7C;AACA,KAAM,CAACmB,QAAQ,CAAEC,WAAW,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAAC,CAE3C,KAAM,CAAAqB,QAAQ,CAAG,cAAAA,CAAOC,WAAW,CAAe,IAAb,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC3C,GAAI,CACFR,QAAQ,CAAC,EAAE,CAAC,CACZE,UAAU,CAAC,IAAI,CAAC,CAEhB,GAAII,WAAW,CAAE,CACf,KAAM,CAAAK,KAAK,CAAG,KAAM,CAAAtB,aAAa,CAAC,CAAC,CACnCe,WAAW,CAACO,KAAK,CAAC,CACpB,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAxB,YAAY,CAAC,CAChCyB,IAAI,CAAEhB,SAAS,CACfiB,KAAK,CAAEP,IACT,CAAC,CAAC,CACF,KAAM,CAAAQ,YAAY,CAAGH,MAAM,CAACI,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CAC/CD,IAAI,CAACE,EAAE,CAAGD,KAAK,CACf,MAAO,CAAAD,IAAI,CACb,CAAC,CAAC,CACFjB,QAAQ,CAACe,YAAY,CAAC,CACxB,CAAC,OAAS,CACRb,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAkB,iBAAiB,CAAGC,IAAA,EAAc,IAAb,CAAEC,IAAK,CAAC,CAAAD,IAAA,CACjChB,QAAQ,CAAC,KAAK,CAAEiB,IAAI,CAAGzB,SAAS,CAAC,CACnC,CAAC,CAEDd,SAAS,CAAC,IAAM,CACd;AACAsB,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEd,IAAA,CAACN,SAAS,EAACsC,cAAc,MAAAC,QAAA,cACvBjC,IAAA,CAACL,GAAG,EAACuC,MAAM,CAAC,MAAM,CAACC,EAAE,CAAE,CAAE,CAAAF,QAAA,cACvBjC,IAAA,CAACJ,QAAQ,EACPc,OAAO,CAAEA,OAAQ,CACjB0B,IAAI,CAAE5B,KAAM,CACZP,OAAO,CAAEA,OAAQ,CACjBoC,QAAQ,CAAE/B,SAAU,CACpBgC,cAAc,CAAC,QAAQ,CACvB1B,QAAQ,CAAEA,QAAS,CACnB2B,YAAY,CAAEV,iBAAkB,CACjC,CAAC,CACC,CAAC,CACG,CAAC,CAEhB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}